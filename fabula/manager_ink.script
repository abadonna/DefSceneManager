go.property("proxies", msg.url("."))

local UTILS = require "fabula.utils" 
local STATE = require "fabula.state" 

local function url_to_scene(self, scene)
	return msg.url(self.proxies.socket, self.proxies.path, scene)
end

local narrator = require('narrator.narrator')

function string:split(sep)
	if sep == nil then
		sep = '%s'
	end 

	local res = {}
	local func = function(w)
		table.insert(res, w)
	end 

	string.gsub(self, '[^'..sep..']+', func)
	return res 
end

function init(self)
	self.inclusions = {}
	self.templates = {}
	msg.post(".", "acquire_input_focus")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function unpack_action(templates, action, result)
	for name, template in pairs(templates) do
		if action[name] then
			for i, t in ipairs(template) do
				local data = UTILS.process_template(t, action, name)
				unpack_action(templates, data, result)
			end
			return
		end
	end
		
	table.insert(result, action)
end

local function process(self, action)
	if not UTILS.check_condition(action) then
		return
	end

	if action.delay and action.select == nil then
		self.delay_timer = timer.delay(action.delay, false, function()
			coroutine.resume(self.co_progress)
		end)
		coroutine.yield()
		return
	end

	if action.portrait then
		msg.post("#gui", "portrait", action)
	end

	if action.text_move then
		msg.post("#gui", "text_move", action.text_move)
	end

	if action.text_restore then
		msg.post("#gui", "text_restore")
	end

	if action.text then
		if string.find(action.text, "{") then
			action.formatted_text = UTILS.format_string(action.text)
		end
		msg.post("#gui", "text", action)
		self.wait_feedback = true
		coroutine.yield()
		return
	end

	if action.move or action.show or action.hide or action.scale or action.animate or action.msg or action.delete then
		msg.post(self.scene .. ":/controller", "action", action)
		--to avoid "function called can only access instances within the same collection"
	end

	if action.clear then
		msg.post("#gui", "clear", action)
	end

	if action.set then
		for k, v in pairs(action.set) do
			if type(v) == "string" then
				v = UTILS.format_string(v)
				if string.find(v, "+") == 1 then
					v = tonumber(STATE[k]) + tonumber(string.sub(v, 2))
				elseif string.find(v, "-") == 1 then
					v = tonumber(STATE[k]) - tonumber(string.sub(v, 2))
				elseif string.find(v, "~") == 1 then
					v = math.random(0, tonumber(string.sub(v, 2)))
				end
			end
			STATE[k] = v
		end
		msg.post(".", "state_changed")
		msg.post(self.scene .. ":/controller", "state_changed")
	end

	if action.url then
		local url = string.find(action.url, "http") and action.url or "http://" .. action.url
		if action.blank and html5 then
			html5.run("document.getElementById(\"canvas\").onclick = function (e) {window.open(\"" .. url .. "\",\"_blank\");document.getElementById(\"canvas\").onclick = \"\";};")
		else
			sys.open_url(url)
		end
	end

	if action.save then
		local path = sys.get_save_file(sys.get_config("project.title"), action.save)
		local story = STATE._STORY
		STATE._STORY = nil
		if not sys.save(path, STATE) then
			pprint("can't save " .. action.save)
		end
		STATE._STORY = story
	end

	if action.load then
		for key, _ in pairs(STATE) do
			STATE[key] = nil
		end

		local path = sys.get_save_file(sys.get_config("project.title"), action.load)
		local data = sys.load(path)
		if not next(data) then
			pprint("state is empty")
		else
			for key, value in pairs(data) do
				STATE[key] = value
			end
		end

		msg.post(".", "state_changed")
		msg.post(self.scene .. ":/controller", "state_changed")
	end
	
end

local function check_template(self, name, value)
	local actions = {}
	for tname, template in pairs(self.templates) do
		if tname == name then
			for i, t in ipairs(template) do
				local data = UTILS.process_template(t, {value = value}, name)
				unpack_action(self.templates, data, actions)
			end
		end
	end
	return actions
end

local function exec_command(self, command)
	local data = command:split(" ")
	local cmd = table.remove(data, 1)
	local actions = check_template(self, cmd, table.concat(data, " "))

	for _, action in ipairs(actions) do 
		process(self, action)
	end
	
	if cmd == "SCENE" then
		if self.scene then
			local url = url_to_scene(self, self.scene)
			msg.post(url, "disable")
			msg.post(url, "final")
			msg.post(url, "unload")
		end
		
		self.scene = data[1]
		msg.post(url_to_scene(self, scene), "async_load")
		coroutine.yield()
	end
	
end

local function init_story(self, book)
	local story = narrator.initStory(book)
	story:begin()
	STATE._STORY = story
	self.co_progress = coroutine.create(function (answer)
		while story:canContinue() do
			local paragraphs = story:continue()
			for _, paragraph in ipairs(paragraphs) do

				if paragraph.tags then
					for _, tag in ipairs(paragraph.tags) do
						exec_command(self, tag)
					end
				end
				
				local text = paragraph.text
				local data = text:split(":")
				local name = table.remove(data, 1)
				local actions = check_template(self, name, table.concat(data, ":"))
		
				if #actions == 0 and self.default_template then
					actions = check_template(self, self.default_template, text)
				end

				for _, action in ipairs(actions) do 
					process(self, action)
				end
				
				if #actions == 0 then
					msg.post("#gui", "text", {text = text})
					self.wait_feedback = true
					coroutine.yield()
				end
				--pprint(text)
			end

			-- If there is no choice it seems like the game is over
			if not story:canChoose() then break end

			-- Get available choices and output them to the player
			local choices = story:getChoices()
			local clone = {select = {}}
			for i, choice in ipairs(choices) do
				--print(i .. ') ' .. choice.text)
				table.insert(clone.select, {text = choice.text, action = i})
			end
			msg.post("#gui", "clear", {clear = "all"})
			msg.post("#gui", "select", clone)
			coroutine.yield()
			story:choose(self.answer)
		end
	end)

	coroutine.resume(self.co_progress) 
end

function on_message(self, message_id, message, sender)
	if message_id == hash("add_inclusion") then
		local res = sys.load_resource("/story/" .. message.file)
		table.insert(self.inclusions, res)
		
	elseif message_id == hash("load_book") then
		local content = sys.load_resource("/story/" .. message.file)
		local book = narrator.parseBook(content, self.inclusions)
		init_story(self, book)

	elseif message_id == hash("action") then
		msg.post("#gui", "clear", {clear = "all"})
		self.answer = message.action
		coroutine.resume(self.co_progress) 

	elseif message_id == hash("register_template") then
		self.templates[message.name] = message.template

	elseif message_id == hash("set_default_template") then
		self.default_template = message.template

	elseif message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")
		coroutine.resume(self.co_progress) 
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed and self.wait_feedback then
		self.wait_feedback = false
		coroutine.resume(self.co_progress) 
	end
end

go.property("intro", true)
go.property("menu", false)
go.property("local_data", true)
go.property("proxies", msg.url("."))
local play

local STATE = require "fabula.state" 

local function url_to_scene(self, scene)
	return msg.url(self.proxies.socket, self.proxies.path, scene)
end

local function format_string(self, s)
	local result = s
	for key, val in pairs(STATE) do
		if type(val) ~= "boolean" then
			result = string.gsub(result, "{" .. key .. "}", val)
		end
	end
	return result
end

local function check_condition(self, action)
	if action.condition and action.condition_any then
		return check_condition(self, {condition = action.condition}) 
		and check_condition(self, {condition_any = action.condition_any})
	end
	
	local condition = action.condition or action.condition_any
	if not condition then
		return true
	end
	
	local result = action.condition ~= nil
	
	for k, v in pairs(condition) do
		local check = STATE[k]
		local test = true
		local is_ok = true
		if check == nil then
			local base_check = check
			local suffix_idx = string.find(string.reverse(k), "_")
			local suffix = nil
			if suffix_idx then
				suffix = string.sub(k, -suffix_idx, -1)
				k = string.sub(k, 1, #k - suffix_idx)
				base_check = STATE[k]
			end
			
			if not base_check then
				base_check = 0
			end
			
			if type(base_check) == "number" then
				local values = {v}
				if type(v) == "string" then
					values = {tonumber(STATE[v]) or tonumber(v) or 0}
				elseif type(v) == "table" then
					values = {}
					for _, val in ipairs(v) do
						table.insert(values, tonumber(STATE[val]) or tonumber(val) or 0)
					end
				end
				
				if suffix == "_lte" then
					test = false
					for _, value in ipairs(values) do
						if value < base_check then
							is_ok = false
							break
						end
					end
				elseif suffix == "_lt" then
					test = false
					for _, value in ipairs(values) do
						if value <= base_check then
							is_ok = false
							break
						end
					end
				elseif suffix == "_gte" then
					test = false
					for _, value in ipairs(values) do
						if value > base_check then
							is_ok = false
							break
						end
					end
				elseif suffix == "_gt" then
					test = false
					for _, value in ipairs(values) do
						if value >= base_check then
							is_ok = false
							break
						end
					end
				end
			end
		end
		
		if test and (not v or v == 0) and not check then
			test = false
		end
		
		if test and type(check) == "string" then
			v = format_string(self, v)
		end
		
		if test and v ~= check then
			is_ok = false
		end
		
		if action.condition then
			result = result and is_ok
		else
			result = result or is_ok
		end
	end
	
	return result
end

local function process(self, action)
	
	if not action or type(action) ~= "table" then
		if self.index > #self.actions then
			pprint("no more actions")
			return
		end
		action = self.actions[self.index]
		self.index = self.index + 1
	end
	
	if not check_condition(self, action) then
		process(self)
		return
	end
	
	if action.delay and action.select == nil then
		timer.delay(action.delay, false, process)
		return
	end

	local clone = {}
	for key, _ in pairs(action) do
		clone[key] = action[key]
	end
	
	if STATE.ALTERNATIVE_LAYOUT then
		for _, key in ipairs({"x", "y"}) do
			if action[key .. "2"] then
				clone[key] = action[key .. "2"]
			end
		end
	end

	if action.portrait then
		msg.post("#gui", "portrait", clone)
	end

	if action.text_move then
		msg.post("#gui", "text_move", action.text_move)
	end

	if action.text_restore then
		msg.post("#gui", "text_restore")
	end
	
	if action.text then
		if string.find(action.text, "{") then
			clone.formatted_text = format_string(self, action.text)
		end
		msg.post("#gui", "text", clone)
		return
	end

	
	if action.select then
		clone.select = {}
		--local clone = {select = {}, spacing = action.spacing, speed = action.speed, delay = action.delay, random = action.random}
		for _, v in ipairs(action.select) do
			if check_condition(self, v) then
				table.insert(clone.select, v)
			end
		end
		msg.post("#gui", "select", clone)
		if not action.pass then
			return
		end
	end
	
	if action.move or action.show or action.hide or action.scale or action.animate or action.msg or action.delete then
		msg.post(self.socket .. ":/controller", "action", action)
			--to avoid "function called can only access instances within the same collection"
	end
	
	if action.clear then
		msg.post("#gui", "clear", action)
	end
	
	if action.set then
		for k, v in pairs(action.set) do
			if type(v) == "string" then
				v = format_string(self, v)
				if string.find(v, "+") == 1 then
					v = tonumber(STATE[k]) + tonumber(string.sub(v, 2))
				elseif string.find(v, "-") == 1 then
					v = tonumber(STATE[k]) - tonumber(string.sub(v, 2))
				elseif string.find(v, "~") == 1 then
					v = math.random(0, tonumber(string.sub(v, 2)))
				end
			end
			STATE[k] = v
		end
		msg.post(".", "state_changed")
		msg.post(self.socket .. ":/controller", "state_changed")
	end
	
	if action.url then
		local url = string.find(action.url, "http") and action.url or "http://" .. action.url
		if action.blank and html5 then
			html5.run("document.getElementById(\"canvas\").onclick = function (e) {window.open(\"" .. url .. "\",\"_blank\");document.getElementById(\"canvas\").onclick = \"\";};")
		else
			sys.open_url(url)
		end
	end
	
	if action.unload and self.scenes[action.unload] then
		local url = url_to_scene(self, action.unload)
		msg.post(url, "disable")
		msg.post(url, "final")
		msg.post(url, "unload")
		self.scenes[action.unload] = nil
	end
	
	if action.save then
		local path = sys.get_save_file(sys.get_config("project.title"), action.save)
		if not sys.save(path, STATE) then
		  pprint("can't save " .. action.save)
		end
	end
	
	if action.load then
		for key, _ in pairs(STATE) do
			STATE[key] = nil
		end
		
		local path = sys.get_save_file(sys.get_config("project.title"), action.load)
		local data = sys.load(path)
		if not next(data) then
		  	pprint("state is empty")
		else
			for key, value in pairs(data) do
				STATE[key] = value
			end
		end
		
		msg.post(".", "state_changed")
		msg.post(self.socket .. ":/controller", "state_changed")
	end
	
	if action.scene then
		msg.post("#gui", "clear", {clear="all"})
		
		self.action = action.action
		if not action.keep then
			self.scene = action.scene
			msg.post(".", "loading_start")
			local temp = self.scenes
			self.scenes = {}
			for key, _ in pairs(temp) do
				local url = url_to_scene(self, key)
				msg.post(url, "disable")
				msg.post(url, "final")
				msg.post(url, "unload")
			end
		else
			play(self, action.scene)
		end
		return
	end
	
	if action.stop then
		return
	end
	
	if action.goto then
		local target = format_string(self, action.goto)
		for i, v in ipairs(self.actions) do
			if v.label == target then
				self.index = i
				break
			end
		end
	end
	
	process(self)
end


local function load_scene(self, scene)
	self.scenes[scene] = true
	msg.post(url_to_scene(self, scene), "async_load")
end

local function resource_store_response(self, hexdigest, status)
    if status == true then
        -- Successfully loaded resource
        --print("Resource data stored: " .. hexdigest)

        -- One less resource to go...
        self.resources_pending = self.resources_pending - 1
        
        -- That was all of them, time to load the proxied collection.
        if self.resources_pending == 0 then
            load_scene(self, self.socket)
        end
    else
        -- ERROR! Failed to store the data!
        print("Failed to store resource data: " .. hexdigest)
    end
end


local function load_resources(self, scene)
	local missing_resources = collectionproxy.missing_resources(url_to_scene(self, scene)) 
	self.resources_pending = #missing_resources
	
	if self.resources_pending == 0 then
		load_scene(self, scene)
    end
	
	for _,resource_hash in ipairs(missing_resources) do
    	msg.post("#", "download", {resource_hash = resource_hash})
    end
end


play = function (self, scene)
	if not scene then
		return
	end
	self.socket = scene
	self.index = 1
	self.actions = {}
	local res = sys.load_resource("/story/" .. scene .. ".script")
	if res then
		self.actions = loadstring(res)()
	end
	
	if not self.scenes[scene] then
		load_resources(self, scene)
	else
		msg.post(".", "loading_end")
		process(self, self.action)
	end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")
		msg.post(".", "loading_end")
		process(self, self.action)
	elseif message_id == hash("proxy_unloaded") and self.scene then
    	play(self, self.scene)
    	self.scene = nil
    elseif message_id == hash("play") then
    	self.action = nil
    	play(self, message.scene)
	elseif message_id == hash("text_done") then
		if message.pass then
			process(self)
		else
			self.wait_feedback = true
		end
	elseif message_id == hash("action") then
		process(self, message.action)
	elseif message_id == hash("layout") then
		msg.post(self.socket .. ":/controller", "reset")
	elseif message_id == hash("download") then
		local manifest = resource.get_current_manifest() 
		local base_url = self.data_path or sys.get_config("project.host") 
		--pprint ("new request - " .. message.resource_hash)
		http.request(base_url .. message.resource_hash, "GET", function(self, id, response)
				--pprint ("response " .. message.resource_hash .. " - " .. response.status)
                if response.status == 200 or response.status == 304 then 
                    -- We got the response ok.
                    --print("storing " .. message.resource_hash)
                    resource.store_resource(manifest, response.response, message.resource_hash, resource_store_response) 
                else
                    -- ERROR! Failed to download resource!
                    print("Failed to download resource: " .. message.resource_hash)
                end
            end)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("click") and action.pressed and self.wait_feedback then
		self.wait_feedback = false
        process(self)
    end
end

function init(self)
	self.scenes = {}
	self.actions = {}
	self.socket = ""
	self.wait_feedback = false
	self.resources_pending = 0 

	math.randomseed(os.time())
	
	msg.post(".", "acquire_input_focus")

	if html5 and self.local_data then
		self.data_path = html5.run("(typeof data_path === \"undefined\") ? \"\" : data_path") 
		if #self.data_path == 0 then
			local res = html5.run("document.location")
			local idx = string.find(res, "?") 
			if idx then
				res = string.sub(res, 1, idx - 1)
			end
			self.data_path = string.gsub(res, "%w+%.html", "data/")
			if not string.find(self.data_path, "/data/") then
				self.data_path = self.data_path .. "/data/"
			end
		end
	end

	if self.intro then
		play(self, "intro")
	elseif self.menu then
		play(self, "menu")
	end

	--msg.post("@system:", "toggle_profile")
end